Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

 

Example 1:


Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.
Example 2:


Input: root = [1,null,2,null,0,3]
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [2, 5000].
0 <= Node.val <= 105
Accepted
186,469
Submissions
246,399

//****************************************************APPROACH 1(USING PAIRS)******************************************************************

class Solution {
public:
    
          int ans=0;
    
    pair<int,int> helper(TreeNode *root){
        
        if(!root){
            return {INT_MAX,INT_MIN};
        }
        
      //WE STORES THE MINIMU AND MAXIMUM VALUE IN PAIR AND RETURN TO THE PARENT NODE
      //UPDATE THE DIFFERENCE  
        
        
        pair<int,int> lp=helper(root->left);
        pair<int,int> rp=helper(root->right);
        
        int minimum=min(root->val,min(rp.first,lp.first));;
        int maximum=max(root->val,max(rp.second,lp.second));
        
         ans=max(ans,max(abs(root->val-maximum),abs(root->val-minimum)));
        
  
        
        return {minimum,maximum};
        
    }
    
    int maxAncestorDiff(TreeNode* root) {
        
        if(!root) return 0;
        
        helper(root);
        
        return ans;
    }
};
