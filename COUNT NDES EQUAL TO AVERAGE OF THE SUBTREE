Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

Note:

The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.
 

Example 1:


Input: root = [4,8,5,0,1,null,6]
Output: 5
Explanation: 
For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.
For the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.
For the node with value 0: The average of its subtree is 0 / 1 = 0.
For the node with value 1: The average of its subtree is 1 / 1 = 1.
For the node with value 6: The average of its subtree is 6 / 1 = 6.
Example 2:


Input: root = [1]
Output: 1
Explanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000

*************************************************************APPROACH 1 O(N2)*******************************************************************************

O(N2)

class Solution {
public:
     
           int ans=0;
    //ans is made to count the total nodes satisfy the condition
    
    
    int getSum(TreeNode *root,int &count){
        
      //GETSUM IS USED TO FIND OUT THE TOTAL SUM OF THE SUBTREE  
        
        if(!root) return 0;
        
        //COUNT IS USED TO COUNT THE TOTAL NODES IN THE SUBTREE
        
          count++;
        
        return root->val+getSum(root->left,count)+getSum(root->right,count);
        
    }

    
    
    void helper(TreeNode *root){
        
        if(!root) return;
        
        //COUNT IS USED TO COUNT THE TOTAL NODES IN THE SUBTREE
        
          int count=0;
        
        int sum=getSum(root,count);
      
        //CHECK OUT THE REQUIRED CONDITION
        if(sum/count==root->val) ans++;
        
        //RECURSIVE CALLS
        
        helper(root->left);
        helper(root->right);
    }
    
    int averageOfSubtree(TreeNode* root) {
        
        if(!root) return 0;
        
        helper(root);
        
        return ans;
    }
};

******************************************************APPROACH 2 O(N)****************************************************************************

class Solution {
public:    
            int ans=0; 
    
    //ASSUME FIRST HAVE SUM AND SECOND HAVE TOTAL NUMBER OF NODES
    
    pair<int,int> helper(TreeNode *root){
        
          if(!root) return {0,0};
        
        //IF WE ARE AT THE LEAF NODE OF THE TREE THEN SUM IS ROOT->VAL AND TOTAL NODES IS 1                 
        //REACH OUT THE LEFT LEAF
         pair<int,int> lp=helper(root->left);
        
        //REACH OUT THE RIGHT LEAF
         pair<int,int> rp=helper(root->right);
        
         //SMALL CALCULATION
         int totalSum=lp.first+rp.first+root->val;
         int totalNodes=lp.second+rp.second+1;
        
        //CHECKING THE CONDITION
         if(totalSum/totalNodes==root->val) ans++;
        
        //RETURN FINAL UPDATED PAIR
          return {totalSum,totalNodes};
        
    }
    
    
    
    int averageOfSubtree(TreeNode* root) {
        
        helper(root);
        
         return ans;
    }
};
